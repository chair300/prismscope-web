#!/usr/bin/env node

/**
 * Manual Link Checker for Prismscope Website
 * 
 * Usage:
 *   npm run check-links
 *   node scripts/check-links.js
 *   node scripts/check-links.js --local
 *   node scripts/check-links.js --live
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Configuration
const LOCAL_URL = 'http://localhost:8080';
const LIVE_URL = 'https://prismscope.ai';
const REPORT_FILE = 'link-check-report.txt';

// Parse command line arguments
const args = process.argv.slice(2);
const checkLocal = args.includes('--local');
const checkLive = args.includes('--live');
const verbose = args.includes('--verbose') || args.includes('-v');

console.log('🔍 Prismscope Link Checker');
console.log('=========================\n');

/**
 * Install broken-link-checker if not available
 */
function ensureLinkChecker() {
  try {
    execSync('npx broken-link-checker --version', { stdio: 'ignore' });
  } catch (error) {
    console.log('📦 Installing broken-link-checker...');
    execSync('npm install -g broken-link-checker', { stdio: 'inherit' });
  }
}

/**
 * Start local server for testing
 */
function startLocalServer() {
  try {
    // Check if dist directory exists
    if (!fs.existsSync('dist')) {
      console.log('📦 Building website...');
      execSync('npm run build', { stdio: 'inherit' });
    }

    console.log('🚀 Starting local server...');
    execSync('npx http-server dist -p 8080 -s &', { stdio: 'ignore' });
    
    // Wait for server to start
    setTimeout(() => {}, 3000);
    
    return true;
  } catch (error) {
    console.error('❌ Failed to start local server:', error.message);
    return false;
  }
}

/**
 * Run link checker on a URL
 */
function checkLinks(url, description) {
  console.log(`🔍 Checking ${description}: ${url}`);
  
  const options = [
    '--recursive',
    '--ordered',
    '--filter-level 2',
    '--exclude-external',
    '--max-concurrency 5',
    verbose ? '--verbose' : ''
  ].filter(Boolean).join(' ');

  try {
    const output = execSync(`npx broken-link-checker ${url} ${options}`, {
      encoding: 'utf8',
      timeout: 300000 // 5 minutes timeout
    });
    
    console.log(`✅ ${description} - No broken links found!`);
    
    if (verbose) {
      console.log('\nDetailed Output:');
      console.log(output);
    }
    
    return { success: true, output };
    
  } catch (error) {
    console.log(`❌ ${description} - Broken links detected!`);
    
    console.log('\n📋 Error Details:');
    console.log(error.stdout || error.message);
    
    return { success: false, output: error.stdout || error.message };
  }
}

/**
 * Generate report
 */
function generateReport(results) {
  const timestamp = new Date().toISOString();
  let report = `Prismscope Link Check Report\n`;
  report += `============================\n`;
  report += `Date: ${timestamp}\n`;
  report += `Generated by: scripts/check-links.js\n\n`;
  
  results.forEach(result => {
    report += `${result.description}: ${result.success ? '✅ PASS' : '❌ FAIL'}\n`;
    report += `URL: ${result.url}\n`;
    if (!result.success) {
      report += `Error: ${result.output}\n`;
    }
    report += '\n';
  });
  
  fs.writeFileSync(REPORT_FILE, report);
  console.log(`📄 Report saved to: ${REPORT_FILE}`);
}

/**
 * Main execution
 */
async function main() {
  ensureLinkChecker();
  
  const results = [];
  
  // Check local build if requested or no specific option given
  if (checkLocal || (!checkLocal && !checkLive)) {
    if (startLocalServer()) {
      const result = checkLinks(LOCAL_URL, 'Local Build');
      results.push({
        url: LOCAL_URL,
        description: 'Local Build',
        ...result
      });
      
      // Clean up server
      try {
        execSync('pkill -f "http-server"', { stdio: 'ignore' });
      } catch (e) {
        // Ignore cleanup errors
      }
    }
  }
  
  // Check live website if requested
  if (checkLive || (!checkLocal && !checkLive)) {
    const result = checkLinks(LIVE_URL, 'Live Website');
    results.push({
      url: LIVE_URL,
      description: 'Live Website',
      ...result
    });
  }
  
  // Generate report
  if (results.length > 0) {
    generateReport(results);
  }
  
  // Exit with error code if any checks failed
  const hasFailures = results.some(r => !r.success);
  if (hasFailures) {
    console.log('\n❌ Link check completed with errors!');
    process.exit(1);
  } else {
    console.log('\n✅ All link checks passed!');
    process.exit(0);
  }
}

// Handle errors gracefully
process.on('unhandledRejection', (error) => {
  console.error('❌ Unhandled error:', error);
  process.exit(1);
});

// Run the script
main().catch(error => {
  console.error('❌ Script failed:', error);
  process.exit(1);
});