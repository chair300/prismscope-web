import React, { useState, useEffect } from 'react';
import { demoDataService } from '../services/demoDataService';

const InsightsReport = () => {
  const [report, setReport] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadReport = async () => {
      try {
        const latestReport = await demoDataService.getLatestReport();
        setReport(latestReport);
      } catch (error) {
        console.error('Failed to load report:', error);
      } finally {
        setLoading(false);
      }
    };

    loadReport();
  }, []);

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  };

  const getHealthScoreColor = (score) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getHealthScoreLabel = (score) => {
    if (score >= 80) return 'Healthy';
    if (score >= 60) return 'Needs Attention';
    return 'Critical';
  };

  const getDimensionIcon = (dimension) => {
    const icons = {
      teamMorale: 'üòä',
      processMaturity: 'üìã',
      changeReadiness: 'üöÄ',
      decisionSpeed: '‚ö°',
      resourceAvailability: 'üí∞',
      customerImpact: 'üë•'
    };
    return icons[dimension] || 'üìä';
  };

  const getDimensionColor = (status) => {
    const colors = {
      'Healthy': 'text-green-600 bg-green-50',
      'Ready': 'text-green-600 bg-green-50',
      'Adequate': 'text-green-600 bg-green-50',
      'Fast': 'text-green-600 bg-green-50',
      'Moderate': 'text-yellow-600 bg-yellow-50',
      'Cautious': 'text-yellow-600 bg-yellow-50',
      'Needs Attention': 'text-red-600 bg-red-50',
      'Ad-hoc': 'text-red-600 bg-red-50',
      'Severe': 'text-red-600 bg-red-50',
      'Constrained': 'text-red-600 bg-red-50'
    };
    return colors[status] || 'text-gray-600 bg-gray-50';
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-prism-blue mx-auto"></div>
          <p className="mt-4 text-gray-500">Generating insights report...</p>
        </div>
      </div>
    );
  }

  if (!report) {
    return (
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="text-center py-12">
          <div className="text-6xl mb-4">üìä</div>
          <h3 className="text-xl font-medium text-gray-900 mb-2">No Report Available</h3>
          <p className="text-gray-500 mb-6">
            Complete some assessments to generate a comprehensive insights report
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">{report.title}</h1>
            <p className="mt-2 text-gray-600">
              Generated on {new Date(report.createdAt).toLocaleDateString([], {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </p>
          </div>
          <div className="text-right">
            <div className="text-sm text-gray-500">Generated by</div>
            <div className="font-semibold text-gray-900">Prism AI Consultant</div>
          </div>
        </div>
      </div>

      {/* Executive Summary */}
      <div className="card mb-8">
        <div className="p-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-6">Executive Summary</h2>
          
          <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-8">
            <div className="text-center">
              <div className="text-3xl font-bold text-prism-blue mb-1">
                {report.executiveSummary.totalIssuesAnalyzed}
              </div>
              <div className="text-sm text-gray-500">Issues Analyzed</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-green-600 mb-1">
                {formatCurrency(report.executiveSummary.estimatedAnnualSavings)}
              </div>
              <div className="text-sm text-gray-500">Est. Annual Savings</div>
            </div>
            <div className="text-center">
              <div className={`text-3xl font-bold mb-1 ${getHealthScoreColor(report.executiveSummary.organizationalHealthScore)}`}>
                {report.executiveSummary.organizationalHealthScore}%
              </div>
              <div className="text-sm text-gray-500">Health Score</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-purple-600 mb-1">
                {report.executiveSummary.recommendedActions}
              </div>
              <div className="text-sm text-gray-500">Action Items</div>
            </div>
          </div>

          <div className="grid md:grid-cols-2 gap-8">
            <div>
              <h3 className="font-semibold text-gray-900 mb-3">Issue Distribution</h3>
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">‚öôÔ∏è Technical Issues</span>
                  <span className="font-medium text-blue-600">
                    {report.executiveSummary.technicalIssues}
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">üë• Organizational Issues</span>
                  <span className="font-medium text-purple-600">
                    {report.executiveSummary.organizationalIssues}
                  </span>
                </div>
              </div>
            </div>
            <div>
              <h3 className="font-semibold text-gray-900 mb-3">Priority Breakdown</h3>
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">üî¥ High Priority</span>
                  <span className="font-medium text-red-600">
                    {report.executiveSummary.priorityDistribution.high}
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">üü° Medium Priority</span>
                  <span className="font-medium text-yellow-600">
                    {report.executiveSummary.priorityDistribution.medium}
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">üü¢ Low Priority</span>
                  <span className="font-medium text-green-600">
                    {report.executiveSummary.priorityDistribution.low}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Detailed Analysis */}
      <div className="grid md:grid-cols-2 gap-8 mb-8">
        {/* Technical Findings */}
        <div className="card">
          <div className="p-6">
            <h3 className="text-lg font-semibold text-blue-900 mb-4 flex items-center">
              <span className="text-xl mr-2">‚öôÔ∏è</span>
              Technical Findings
            </h3>
            <p className="text-gray-600 mb-4">
              {report.detailedAnalysis.technicalFindings.summary}
            </p>
            
            <div className="space-y-4">
              {report.detailedAnalysis.technicalFindings.issues.map((issue, index) => (
                <div key={index} className="border border-gray-200 rounded-lg p-4">
                  <div className="flex items-start justify-between mb-2">
                    <h4 className="font-medium text-gray-900">{issue.title}</h4>
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                      issue.priority === 'High' ? 'bg-red-100 text-red-800' : 'bg-yellow-100 text-yellow-800'
                    }`}>
                      {issue.priority}
                    </span>
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-gray-500">Annual Savings:</span>
                      <span className="font-medium text-green-600 ml-1">
                        {formatCurrency(issue.annualSavings)}
                      </span>
                    </div>
                    <div>
                      <span className="text-gray-500">Complexity:</span>
                      <span className="font-medium ml-1">{issue.implementationComplexity}</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Organizational Findings */}
        <div className="card">
          <div className="p-6">
            <h3 className="text-lg font-semibold text-purple-900 mb-4 flex items-center">
              <span className="text-xl mr-2">üë•</span>
              Organizational Findings
            </h3>
            <p className="text-gray-600 mb-4">
              {report.detailedAnalysis.organizationalFindings.summary}
            </p>
            
            <div className="space-y-4">
              {report.detailedAnalysis.organizationalFindings.issues.map((issue, index) => (
                <div key={index} className="border border-gray-200 rounded-lg p-4">
                  <div className="flex items-start justify-between mb-2">
                    <h4 className="font-medium text-gray-900">{issue.title}</h4>
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                      issue.priority === 'High' ? 'bg-red-100 text-red-800' : 'bg-yellow-100 text-yellow-800'
                    }`}>
                      {issue.priority}
                    </span>
                  </div>
                  <div className="text-sm">
                    <span className="text-gray-500">Business Risk:</span>
                    <span className="font-medium text-red-600 ml-1">{issue.businessRisk}</span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Organizational Health */}
      <div className="card mb-8">
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-lg font-semibold text-gray-900">Organizational Health Assessment</h3>
            <div className="text-right">
              <div className={`text-2xl font-bold ${getHealthScoreColor(report.detailedAnalysis.organizationalHealth.overallScore)}`}>
                {report.detailedAnalysis.organizationalHealth.overallScore}%
              </div>
              <div className={`text-sm font-medium ${getHealthScoreColor(report.detailedAnalysis.organizationalHealth.overallScore)}`}>
                {getHealthScoreLabel(report.detailedAnalysis.organizationalHealth.overallScore)}
              </div>
            </div>
          </div>

          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
            {Object.entries(report.detailedAnalysis.organizationalHealth.dimensions).map(([key, dimension]) => (
              <div key={key} className="border border-gray-200 rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center space-x-2">
                    <span className="text-lg">{getDimensionIcon(key)}</span>
                    <span className="font-medium text-gray-900 capitalize">
                      {key.replace(/([A-Z])/g, ' $1').trim()}
                    </span>
                  </div>
                  <div className="text-right">
                    <div className="text-lg font-bold text-gray-900">{dimension.score}%</div>
                  </div>
                </div>
                <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getDimensionColor(dimension.status)} mb-2`}>
                  {dimension.status}
                </div>
                <p className="text-xs text-gray-600">{dimension.evidence}</p>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Recommendations */}
      <div className="card">
        <div className="p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-6">Strategic Recommendations</h3>
          
          <div className="grid md:grid-cols-3 gap-6">
            <div>
              <h4 className="font-medium text-red-900 mb-3 flex items-center">
                <span className="w-2 h-2 bg-red-500 rounded-full mr-2"></span>
                Immediate Actions
              </h4>
              <ul className="space-y-2">
                {report.recommendations.immediate.map((action, index) => (
                  <li key={index} className="text-sm text-gray-600 flex items-start">
                    <span className="text-red-500 mr-2">‚Ä¢</span>
                    {action}
                  </li>
                ))}
              </ul>
            </div>
            
            <div>
              <h4 className="font-medium text-yellow-900 mb-3 flex items-center">
                <span className="w-2 h-2 bg-yellow-500 rounded-full mr-2"></span>
                Quarter 1 Actions
              </h4>
              <ul className="space-y-2">
                {report.recommendations.quarterOneActions.map((action, index) => (
                  <li key={index} className="text-sm text-gray-600 flex items-start">
                    <span className="text-yellow-500 mr-2">‚Ä¢</span>
                    {action}
                  </li>
                ))}
              </ul>
            </div>
            
            <div>
              <h4 className="font-medium text-green-900 mb-3 flex items-center">
                <span className="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                Ongoing Optimizations
              </h4>
              <ul className="space-y-2">
                {report.recommendations.ongoingOptimizations.map((action, index) => (
                  <li key={index} className="text-sm text-gray-600 flex items-start">
                    <span className="text-green-500 mr-2">‚Ä¢</span>
                    {action}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </div>

      {/* Footer */}
      <div className="mt-8 text-center text-sm text-gray-500">
        <p>
          This report was generated by Prism AI Consultant based on {report.metadata.dataPoints} organizational 
          issues identified across {report.metadata.conversationSources} assessment sessions.
        </p>
        <p className="mt-2">
          Analysis confidence: <span className="font-medium">{report.metadata.confidence}</span> ‚Ä¢ 
          Version: {report.metadata.analysisVersion}
        </p>
      </div>
    </div>
  );
};

export default InsightsReport;